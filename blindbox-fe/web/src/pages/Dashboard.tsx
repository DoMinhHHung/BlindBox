import React, { useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import "../scss/Dashboard.scss";
import Navbar from "../components/ui/Navbar";

const Dashboard: React.FC = () => {
  const navigate = useNavigate();
  const animatedBgRef = useRef<HTMLDivElement>(null);
  const activeBubblesRef = useRef<HTMLDivElement[]>([]);
  const numLines = 4;
  const numBubbles = 15;
  const numParticles = 20; // TƒÉng s·ªë l∆∞·ª£ng particles ƒë·ªÉ d·ªÖ nh√¨n th·∫•y h∆°n

  useEffect(() => {
    const animatedBg = animatedBgRef.current;
    if (!animatedBg) return;

    // X√≥a t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ con hi·ªán c√≥ (ƒë·ªÉ tr√°nh t·∫°o tr√πng l·∫∑p khi re-render)
    while (animatedBg.firstChild) {
      animatedBg.removeChild(animatedBg.firstChild);
    }

    // C√°c ƒë∆∞·ªùng k·∫ª di chuy·ªÉn
    for (let i = 0; i < numLines; i++) {
      const line = document.createElement("div");
      line.classList.add("line");
      line.style.top = `${15 + i * 20}%`;
      line.style.animationDelay = `${i * 1}s`;
      animatedBg.appendChild(line);
    }

    // C√°c bong b√≥ng blindbox tr√¥i n·ªïi
    const createBubble = () => {
      const bubble = document.createElement("div");
      bubble.classList.add("blindbox-bubble");
      const size = Math.random() * 30 + 25;
      bubble.style.width = `${size}px`;
      bubble.style.height = `${size}px`;
      bubble.style.left = `${Math.random() * 100}vw`;
      bubble.style.animationDelay = `${Math.random() * 10}s`;
      bubble.style.animationDuration = `${Math.random() * 5 + 8}s`;

      bubble.addEventListener("click", () => {
        popBubble(bubble);
      });

      animatedBg.appendChild(bubble);
      activeBubblesRef.current.push(bubble);

      bubble.addEventListener("animationend", () => {
        activeBubblesRef.current = activeBubblesRef.current.filter(
          (b) => b !== bubble
        );
        bubble.remove();
        createBubble();
      });
    };

    const popBubble = (bubble: HTMLDivElement) => {
      bubble.classList.add("bubble-pop");
      const message = document.createElement("div");
      message.style.position = "absolute";
      message.style.top = `${bubble.offsetTop}px`;
      message.style.left = `${bubble.offsetLeft}px`;
      message.style.color = "#fdd835";
      message.style.fontSize = "1.2em";
      message.style.pointerEvents = "none";
      message.textContent = "+100 ƒëi·ªÉm"; // Th√™m n·ªôi dung khi bong b√≥ng n·ªï
      animatedBg.appendChild(message);

      activeBubblesRef.current = activeBubblesRef.current.filter(
        (b) => b !== bubble
      );

      setTimeout(() => {
        message.remove();
        bubble.remove();
        createBubble();
      }, 800);
    };

    for (let i = 0; i < numBubbles; i++) {
      setTimeout(() => createBubble(), i * 300);
    }

    const createParticle = () => {
      const particle = document.createElement("div");
      particle.classList.add("particle");
      const size = Math.random() * 15 + 5;
      particle.style.width = `${size}px`;
      particle.style.height = `${size}px`;
      particle.style.top = `${Math.random() * 100}vh`;
      particle.style.left = `${Math.random() * 100}vw`;
      particle.style.animationDelay = `${Math.random() * 3}s`;
      particle.style.animationDuration = `${Math.random() * 5 + 5}s`;

      const colors = [
        "rgba(255, 255, 255, 0.3)",
        "rgba(255, 216, 53, 0.3)",
        "rgba(233, 30, 99, 0.3)",
      ];
      particle.style.backgroundColor =
        colors[Math.floor(Math.random() * colors.length)];

      animatedBg.appendChild(particle);

      setTimeout(() => {
        if (particle.parentElement === animatedBg) {
          particle.remove();
          createParticle();
        }
      }, parseFloat(particle.style.animationDuration) * 1000);
    };

    for (let i = 0; i < numParticles; i++) {
      setTimeout(() => createParticle(), i * 100);
    }

    // Cleanup function khi component unmount
    return () => {
      activeBubblesRef.current = [];
    };
  }, []);

  return (
    <div className="dashboard">
      <Navbar />

      <div className="container">
        <header>
          <h1>Ch√†o M·ª´ng ƒê·∫øn V·ªõi C·ª≠a H√†ng C·ªßa Ch√∫ng T√¥i</h1>
          <p>Kh√°m ph√° th·∫ø gi·ªõi th·ªùi trang v√† nh·ªØng ƒëi·ªÅu b·∫•t ng·ªù!</p>
          <div className="cta-buttons">
            <a
              href="#"
              className="cta-button"
              onClick={(e) => {
                e.preventDefault();
                navigate("/new-products");
              }}
            >
              S·∫£n Ph·∫©m M·ªõi
            </a>
            <a
              href="#"
              className="cta-button"
              onClick={(e) => {
                e.preventDefault();
                navigate("/special-collection");
              }}
            >
              B·ªô S∆∞u T·∫≠p ƒê·∫∑c Bi·ªát
            </a>
          </div>
        </header>

        <section className="featured-section">
          <h2>Danh M·ª•c N·ªïi B·∫≠t</h2>
          <div className="featured-grid">
            <div className="feature-card">
              <div className="feature-icon">üëü</div>
              <h3>Gi√†y D√©p</h3>
              <p>Phong c√°ch ƒëa d·∫°ng, ch·∫•t l∆∞·ª£ng h√†ng ƒë·∫ßu.</p>
              <a
                href="#"
                onClick={(e) => {
                  e.preventDefault();
                  navigate("/shoes");
                }}
              >
                Xem Ngay
              </a>
            </div>
            <div className="feature-card">
              <div className="feature-icon">üëï</div>
              <h3>Qu·∫ßn √Åo</h3>
              <p>Thi·∫øt k·∫ø th·ªùi th∆∞·ª£ng, tho·∫£i m√°i v√† c√° t√≠nh.</p>
              <a
                href="#"
                onClick={(e) => {
                  e.preventDefault();
                  navigate("/clothes");
                }}
              >
                Xem Ngay
              </a>
            </div>
            <div className="feature-card">
              <div className="feature-icon">üéÅ</div>
              <h3>Blindbox</h3>
              <p>H·ªôp qu√† b√≠ ·∫©n, kh√°m ph√° ni·ªÅm vui b·∫•t ng·ªù.</p>
              <a
                href="#"
                onClick={(e) => {
                  e.preventDefault();
                  navigate("/blindbox");
                }}
              >
                Kh√°m Ph√°
              </a>
            </div>
          </div>
        </section>

        <footer>
          <p>
            <h1>AUTHOR</h1>
            <span className="marquee">ƒê·ªó Minh H√πng</span>
          </p>
          <p>ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng ABC, Th√†nh ph·ªë XYZ, Vi·ªát Nam</p>
        </footer>
      </div>

      <div
        className="animated-background"
        id="animated-bg"
        ref={animatedBgRef}
      />
    </div>
  );
};

export default Dashboard;
